Rozdział 1 - Wstęp
ng-app - określa jaka część drzewa DOM będzie zarządzana przez AngularJS
<html>
  // niezarządzana przez angulara
  <div ng-app>
  //zarządzana przez Angulara
  </div>
</html>

Przykład 1
<!DOCTYPE html>
<html ng-app>
<head>
</head>
<body>
  <input ng-model="text">
  <p> {{ text }}</p> <!-- Tekst wpisywany w inpucie będzie sie pojawiał w akapicie-->  
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
</body>
</html>

Obiekt scope (a dokladnie $scope) jest mostem miedzy widokiem a kontrolerem, "transportującym model w obu kierunkach.

hello.html
<!DOCTYPE html>
<html ng-app="app" lang="pl">
<head>
  <meta charset="utf-8">
</head>
<body>
  <div ng-controller="FirstCtrl"> 
    <p>Witaj, {{ message.sentence }}</p>
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script src="controller.js"></script>
</body>
</html>

controller.js
angular.module('app',[])
          .controller('FirstCtrl', ['$scope', function ($scope) {
            $scope.message = { sentence: 'Świecie !'};    
          }]);


hello2.html
<!DOCTYPE html>
<html ng-app lang="pl">
<head>
  <meta charset="utf-8">
</head>
<body>
  <input type="text" ng-model="message.sentence"> 
    <p>Witaj, {{ message.sentence }} !</p>
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
</body>
</html>

Angular to framework SPA, czyli: 

1.Logika zostaje przeniesiona z serwera na klienta. Praca łączenia szablonu z danymi odbywa się w przeglądarce, nie na back-endzie.

2.Serwer służy jedynie jako źródło danych dostarczające szablon HTML, CSS oraz Javascript podczas ładowania strony. W razie potrzeby dodatkowe dane z serwera są dosyłane dynamicznie.

3.Strona nie jest przeładowana za każdym razem, odświeżane są tylko wybrane jej elementy.


Przypisywanie modelu do obiektu scope: 

function ExampleController($scope){
  $scope.message { hello: "Witaj, Świecie"};

  var person = [{ name: 'Jan Kowalski', age: 22},
                { name: 'Tomek Bąk', age: 42}
                ];
  $scope.person;
}

W ten sposób przypisaliśmy message oraz person do obiektu $scope i możemy się do niego 
odwoływać w dowolnej części widoku zarządzanej przez Angulara i zawierającej dyrektywę
ng-controller.

Interpolacja - przykład 

{{ message.hello }}
{{ 3 + 22 }}
{{ "AngularJS jest the best" }} 
{{ jakasFunkcja() }}


Quizz
1.Co to jest AngularJS ?
Odp.Framework w JavaScriptcie wykorzystujący HTML.
2.Kto jest twórcą AngularJS ?
Odp.
3.Czym się różni angular.js od angular.min.js
Odp.

4.Co to jest ng-app ?
Odp.

5.Co to jest SPA ?
Odp.

6.Czym się różni wiązanie pojedyncze od podwójnego ?
Odp.

7.Co to jest MVC ?
Odp.


Rozdział2 - $scope - niepozorny obiekt

$scope - Jego podstawowe zadania to: 

-transportowanie modelu pomiędzy widokiem a kontrolerem.
-nasłuchiwanie zdarzeń badź zmian zachodzących w modelu.
-propagacja zmian w modelu.

$rootScope jest rodzicem wszystkich obiektów $scope i znajduje się najwyżej w hierarchii. Nie zaleca się przypisywania mu zbyt wielu atrybutów, gdyż jest on czymś na wzór obiektu globalnego.

Przykład1 

<!DOCTYPE html>
<html ng-app="app" lang="pl">
<head>
  <meta charset="utf-8">
  <title>Kontroler - przypisywanie atrybutów</title>
</head>
<body>
  <div ng-controller="dateCtrl">
    Data: {{ original() | date }} <!-- Interpolacja wywołujemy original w formacie samej daty-->
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    var app = angular.module('app', []); //zmienna przechowywująca odwołanie do modułu
    
    app.run(function ($rootScope) {
      $rootScope.dateOriginal= new Date(); //deklarujemy w rootScope zmienna dateOriginal zawierająca obiekt Date()
    });
    
    app.controller('dateCtrl' , function ($rootScope, $scope) { //w kontrolerze dateCtrl tworzymy funkcję
      $scope.original = function () { //Tworzymy scope'a original który jest funkcją wywołująca rootScope'a dateOriginal
        return $rootScope.dateOriginal;
      };
    });
    
  </script>
</body>
</html>

Przykład2 // dodanie do scope'a innych zmiennych

<!DOCTYPE html>
<html ng-app="app" lang="pl">
<head>
  <meta charset="utf-8">
  <title>Kontroler - przypisywanie atrybutów</title>
</head>
<body>
  <div ng-controller="dateCtrl">
    Data: {{ original() | date }} <!-- Interpolacja wywołujemy original w formacie samej daty-->
    {{ wiadomosc }} <br>
    {{ funkcjaA() }}
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    var app = angular.module('app', []); //zmienna przechowywująca odwołanie do modułu
    
    app.run(function ($rootScope) {
      $rootScope.dateOriginal= new Date(); //deklarujemy w rootScope zmienna dateOriginal zawierająca obiekt Date()
    });
    
    app.controller('dateCtrl' , function ($rootScope, $scope) { //w kontrolerze dateCtrl tworzymy funkcję
      $scope.original = function () { //Tworzymy scope'a original który jest funkcją wywołująca rootScope'a dateOriginal
        return $rootScope.dateOriginal;
      };
      
      $scope.wiadomosc = 'jakas przykładowa wiadomość';
      $scope.funkcjaA = function() {
        
       return $scope.wiadomosc + " <--wiadomosc";
      };
    });
  </script>
</body>
</html>


Przykład3 - poprawa testu
<!DOCTYPE html>
<html lang="pl" ng-app="app">
<head>
  <meta charset="utf-8">
  <title>Dziedziczenie</title>
</head>
<body>
  <div ng-controller="defaultCtrl">
   {{ uczen.zdanyTest }}
    <div ng-controller="inheritianceCtrl">
      <input type="text" ng-model="uczen.imie" placeholder="imie Ucznia ">
      <button ng-click="poprawaTestu()">Poprawa testu</button> 
    </div>
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    var app = angular.module("app", [] );
    
    app.controller('defaultCtrl', function($scope) {
      $scope.uczen = { zdanyTest: false };       // ustawiamy zdany test na false
    });
    
    app.controller('inheritanceCtrl', function($scope) {
      $scope.poprawaTestu = function() { //funkcja poprawia wynik testu na zdany
       $scope.uczen.zdanyTest = true; //odwolujemy sie do zdanego testu i ustawiamy na zdany
      }
    });
  </script>
</body>
</html>

ng-click - po kliknięciu wywołanie funkcji
ng-repeat - pozwala nam iterować po dowonlej kolekcji obiektów, dodatkowo tworzy osobne elementy szablonu DOM dla każdego z elementów kolekcji.

Przykład4 - ng-repeat

<!DOCTYPE html>
<html lang="pl" ng-app="app">
<head>
  <meta charset="utf-8">
  <title>Ng-repeat</title>
</head>
<body>
  <div ng-controller='defaultCtrl'>
    <ul>
      <li ng-repeat="oferta in oferty"><!--przypisujemy oferta w scopie oferty-->
        <p>Nazwa: {{ oferta.nazwa }} a cena: {{ oferta.cena }}</p>]
        <!--Wywołujemy w pętli elementy z oferty-->
      </li>
    </ul>
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    
    var app = angular.module('app', []); //przypisanie do zmiennej odwołania do modułu
    
    app.controller("defaultCtrl", function($scope) {
      $scope.oferty = [ //do scope'a oferty przypisujemy zmienne
        { nazwa: 'Krzesło' , cena: 44 },
        { nazwa: 'Stół' , cena: 56 },
        { nazwa: 'Tv', cena: 999.99 }
      ];
    });
  </script>
</body>
</html>

Dziedziczenie obiektów scope w Angularze odbywa się z użyciem metody new()

  var obiektBazowy = $rootScope;
  var obiektPochodny = obiektBazowy.new();
  obiektBazowy.imie = 'Marian';
  obiektPochodny.nazwisko = 'Kowalski';

W celu zniszczenia danego obiektu scope nalezy zastosować metodę $destroy(), która usuwa wszystkie obiekty pochodne (i ich pochodne) z obiektu bazowego. Od tej chwili dane scope jest gotowy na "odśmiecanie", czyli tzw "garbage collection".

Nasłuchiwanie oraz $watch

po przypisaniu $watch do wybranego elementu AngularJs zaczyna oczekiwac na ewentualne zmiany.

Przykład5. ng-watch

<!DOCTYPE html>
<html lang="pl" ng-app="app">
<head>
  <meta charset="utf-8">
  <title>$watch </title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div ng-controller="defaultCtrl">
    <div class="well">Liczba {{ number }}</div>
    <div>
      <a href="#" class="btn btn-success" ng-click="add()">+</a> <!-- ng-click wywołuje funkcje add() -->
      <a href="#" class="btn btn-danger" ng-click="dec()">-</a> <!--ng-click wywołuje funkcje dec() -->
    </div>
  </div>

  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    app = angular.module("app", []);

    app.controller("defaultCtrl", function($scope){
      $scope.number = 1;
      $scope.$watch('number', function() { //obserwuje zmienna number 
        alert("Uwaga liczba teraz to : " + $scope.number); //jesli sie zmienila to wyskakuje alert
      });
      
      $scope.add = function() {  //dodaje 1 do zmiennej number
        $scope.number++;
      };
      
      $scope.dec = function() { //odejmuje 1 od zmiennej number
        $scope.number--;
      };
    });
  </script>
</body>
</html>

$digest - rozpoczyna się jako efekt wywołania $scope.digest(). Jest to cykl ewaluacji kolejno wszystkich obiektów nasłuchujących występujących w danym scope oraz jego potomkach.

Przykład 6 pt1.
<!DOCTYPE html>
<html lang="pl" ng-app="app">
<head>
  <meta charset="utf-8">
  <title>$watch - AngularJS</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" type="text/css">
</head>
<body>

  <div ng-controller="defaultCtrl">
    <div class="well">Wiadomość: {{ msg }}</div>
  </div>

  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    var app= angular.module("app", [] );
    
    app.controller("defaultCtrl", function($scope) {
      $scope.go = function() {
        setTimeout(function() {
          $scope.msg = "Wow, jestem opóźnioną informacją!";
          console.log('message: ' + $scope.msg);
        },2000);
      };
      $scope.go();
    });

  </script>
</body>
</html>

Wynik nie do konca zgodny z naszymi oczekiwaniami. Naszym celem było uaktualnienie widoku {{msg}} po dwóch sekundach. Tak się jednak nie stało, mimo że teoretycznie program zadziałał i po 2 sek w logu otrzymaliśmy oczekiwant tekst.Dlaczego widok nie został uaktualniony ? Jak rozwiązać ten problem ? Do tego posłuży nam $apply().

Przykład6 pt2
<!DOCTYPE html>
<html lang="pl" ng-app="app">
<head>
  <meta charset="utf-8">
  <title>$watch - AngularJS</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" type="text/css">
</head>
<body>

  <div ng-controller="defaultCtrl">
    <div class="well">Wiadomość: {{ msg }}</div>
  </div>

  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js" ></script>
  <script>
    var app= angular.module("app", [] );
    
    app.controller("defaultCtrl", function($scope) {
      $scope.go = function() {
        setTimeout(function() {
          $scope.msg = "Wow, jestem opóźnioną informacją!";
          console.log('message: ' + $scope.msg);
          $scope.$apply();
        },2000);
      };
      $scope.go();
    });
    /*Wszystko zadziałało tak jak chcialiśmy, msg zostało podmienione :)*/
  </script>
</body>
</html>

Quizz
1.Co to jest $scope ?

2.Czym się różni $scope od $rootScope ?

3.Co to jest drzewo DOM ?

4.Jak stworzyć izolowany scope ?

5.Co to są obiekty nasłuchujące ?

6.Jak działa cykl $digest ?

7.W jakich sytuacjach nazleży korzystać z usługi $apply?

